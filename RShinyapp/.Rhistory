coef(fit, matrix = TRUE)
summary(fit)
#fit with only intercept
fit3.5 <- vglm(cbind(Agree, Neutral, Disagree) ~ 1 ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3.5, matrix = TRUE)
summary(fit3.5)
AIC(fit3.5)
anova(fit3, fit3.5, test = "Chisq")
fit3 <- vglm(cbind(Agree, Neutral, Disagree) ~ Party ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3, matrix = TRUE)
summary(fit3)
fit3.5 <- vglm(cbind(Agree, Neutral, Disagree) ~ 1 ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3.5, matrix = TRUE)
summary(fit3.5)
AIC(fit3.5)
anova(fit3, fit3.5, test = "Chisq")
VGAM:: lrtest(fit3, fit3.5)
summary(fit3.5)
gators <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Alligators2.dat",
header=TRUE)
long.gators <- gators %>%
pivot_longer(cols =          starts_with("y"), values_to = "food")
head(long.gators)
#alternative coding
library(tidyver)
#alternative coding
library(tidyverse)
gators <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Alligators2.dat",
header=TRUE)
long.gators <- gators %>%
pivot_longer(cols =          starts_with("y"), values_to = "food")
head(long.gators)
a
boxplot(EXAM~GRADE,data=stat_class)
title('Exam scores vs Letter Grades')
shiny::runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
runApp()
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
env <- data.frame(rep(1,6))
env$party <- c(rep("Rep", times=3),rep("Dem", times=3))
env$choice <- c(rep(c("agree", "neutral", "disagree"), times=2))
env$count <- c(172, 57, 82, 111, 78, 283)
env$party <- as.factor(env$party)
env$choice <- as.factor(env$choice)
env$choice <- relevel(env$choice, ref="neutral")
env <- env[,-1]
library(nnet)
out=multinom(choice~party, data=env, weight=count)
summary(out)
out0=multinom(choice~1, data=env, weight=count)
summary(out0)
env
party <- c("Republican", "Democrat")
agree <- c(172, 111)
neutral <- c(57, 78)
disagree <- c(82, 283)
library(VGAM)
fit4 <- vglm(cbind(agree,neutral, disagree) ~ party,
family=multinomial(refLevel="disagree"))
coef(fit4, matrix = TRUE)
summary(fit4)
data=c(172,111, 57, 78, 82, 283)
titles = list(Party = c("Republican", "Democrat"),
Opinion= c("Agree", "Neutral", "Disagree"))
size=c(2, 3)
Table_6.9 = array(data, size, titles)
Table_6.9 = as.data.frame(Table_6.9)
Table_6.9$Party = c("Republican", "Democrat")
Table_6.9
data=c(172,111, 57, 78, 82, 283)
titles = list(Party = c("Republican", "Democrat"),
Opinion= c("Agree", "Neutral", "Disagree"))
size=c(2, 3)
Table_6.9 = array(data, size, titles)
Table_6.9 = as.data.frame(Table_6.9)
Table_6.9$Party = c("Republican", "Democrat")
Table_6.9
fit3 <- vglm(cbind(Agree, Neutral, Disagree) ~ Party ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3, matrix = TRUE)
summary(fit3)
AIC(fit3)
#Hosemer-Lemeshow Test
library(MASS)
library(generalhoslem)
env <- data.frame(rep(1,6))
env$party <- c(rep("Rep", times=3),rep("Dem", times=3))
env$choice <- c(rep(c("agree", "neutral", "disagree"), times=2))
env$count <- c(172, 57, 82, 111, 78, 283)
env$party <- as.factor(env$party)
env$choice <- as.factor(env$choice)
env$choice <- relevel(env$choice, ref="neutral")
env <- env[,-1]
library(nnet)
out=multinom(choice~party, data=env, weight=count)
summary(out)
out0=multinom(choice~1, data=env, weight=count)
summary(out0)
TS=1607.794-1507.506
TS
1-pchisq(TS,2)
library(lmtest)
lrtest(out,out0)
#Hosemer-Lemeshow Test
library(MASS)
library(generalhoslem)
logitgof(env$choice, fitted(out))
env <- data.frame(rep(1,6))
env$party <- c(rep("Rep", times=3),rep("Dem", times=3))
env$choice <- c(rep(c("agree", "neutral", "disagree"), times=2))
env$count <- c(172, 57, 82, 111, 78, 283)
env$party <- as.factor(env$party)
env$choice <- as.factor(env$choice)
env$choice <- relevel(env$choice, ref="neutral")
env <- env[,-1]
library(nnet)
out=multinom(choice~party, data=env, weight=count)
summary(out)
out0=multinom(choice~1, data=env, weight=count)
summary(out0)
TS=1607.794-1507.506
TS
1-pchisq(TS,2)
library(lmtest)
lrtest(out,out0)
#Hosemer-Lemeshow Test
library(MASS)
library(generalhoslem)
logitgof(env$choice, fitted(out), g = 5)
logitgof(env$choice, fitted(out), g = 3)
logitgof(env$choice, fitted(out))
logitgof(Table_6.9$cbind(Agree, Neutral, Disagree), fitted(fit3))
logitgof(cbind(Agree, Neutral, Disagree), fitted(fit3))
logitgof(cbind(Table_6.9$Agree, Table_6.9$Neutral, Table_6.9$Disagree), fitted(fit3))
y = cbind(Table_6.9$Agree, Table_6.9$Neutral, Table_6.9$Disagree)
y
out2 <- vglm(choice ~party, data = env, trace = TRUE,
family=multinomial(ref="agree"), weights=count)
library(MASS)
library(generalhoslem)
logitgof(env$choice, fitted(out), g = 2)
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
# # Reading in the dataset
# shiny_data <- read.csv("imp_gender_race_tx.csv", header = T)
shiny_data <- read.csv("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/imp_gender_race_tx.csv", header = T)
runApp()
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
shiny_data
extract_coordinates <- function(coord_string) {
coord_string <- gsub("[\\(\\)]", "", coord_string)  # Remove parentheses
coords <- unlist(strsplit(coord_string, ", "))  # Split into latitude and longitude
return(as.numeric(coords))
}
# Apply function to extract coordinates
shiny_data$Coordinates <- sapply(shiny_data$LatLong, extract_coordinates)
shiny_data$LatLong
gsub("[\\(\\)]", "", shiny_data$LatLong)
coords <- unlist(strsplit(gsub("[\\(\\)]", "", shiny_data$LatLong), ", "))
coords
as.numeric(coords)
# Apply function to extract coordinates
shiny_data$Coordinates <- sapply(shiny_data$LatLong, extract_coordinates)
extract_coordinates(coords)
?sapply
apply(shiny_data$LatLong, extract_coordinates)
apply(shiny_data$LatLong, FUN = extract_coordinates)
dim(shiny_data$LatLong)
extract_coordinates(shiny_data$LatLong)
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
nrow(extract_coordinates(shiny_data$LatLong))
nrow( shiny_data$Coordinates)
shiny_data$Coordinates
# Apply function to extract coordinates
shiny_data$Coordinates <-  extract_coordinates(shiny_data$LatLong)
extract_coordinates(shiny_data$LatLong)
extract_coordinates <- function(coord_string) {
coord_string <- gsub("[\\(\\)]", "", coord_string)  # Remove parentheses
#coords <- unlist(strsplit(coord_string, ", "))  # Split into latitude and longitude
return(as.numeric(coords))
}
# Apply function to extract coordinates
shiny_data$Coordinates <-  extract_coordinates(shiny_data$LatLong)
extract_coordinates(shiny_data$LatLong)
extract_coordinates <- function(coord_string) {
coord_string <- gsub("[\\(\\)]", "", coord_string)  # Remove parentheses
#coords <- unlist(strsplit(coord_string, ", "))  # Split into latitude and longitude
return(as.numeric(coord_string))
}
extract_coordinates(shiny_data$LatLong)
coord_string <- gsub("[\\(\\)]", "", shiny_data$LatLong)
coord_string
shiny_data <- read.csv("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/imp_gender_race_tx.csv", header = T)
# Function to extract latitude and longitude
extract_coordinates <- function(coord_string) {
coord_string <- gsub("[\\(\\)]", "", coord_string)  # Remove parentheses
coords <- unlist(strsplit(coord_string, ", "))  # Split into latitude and longitude
return(as.numeric(coords))
}
# Apply function to extract coordinates
Coordinates <-  sapply(shiny_data$LatLong, extract_coordinates)
Coordinates[seq(1, length(Coordinates), 2)]
Coordinates
Coordinates
shiny_data$coords = Coordinates
Coordinates
evens <- function(x) subset(x, x %% 2 == 0)
evens(Coordinates)
Coordinates[c(FALSE, TRUE)]
Coordinates
Coordinates <-  sapply(shiny_data$LatLong, extract_coordinates)
#odd values- latitudes
latitudes <- Coordinates[seq(1, length(Coordinates), 2)]
#even values - longitudes
longitudes <- Coordinates[c(FALSE, TRUE)]
shiny_data$latitude = latitudes
shiny_data$longitude = longitudes
shiny_data
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
output$county_map <- renderLeaflet({
filtered_data <- shiny_data
# Apply filters based on user input
if (input$genderInput != "All") {
filtered_data <- filtered_data[filtered_data$Gender == input$genderInput, ]
}
if (input$raceInput != "All") {
filtered_data <- filtered_data[filtered_data$Race_Ethnicity == input$raceInput, ]
}
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
head(filtered_data)
filtered_data <- filtered_data[filtered_data$Gender == input$genderInput, ]
head(filtered_data)
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(mtcars, aes(group = gear, y = mpg)) +
geom_boxplot()
ggplot(mtcars, aes(x = gear, y = mpg)) +
geom_boxplot()
ggplot(mtcars, aes(x = factor(gear), y = mpg)) +
geom_boxplot()
df1 <- read.table("https://raw.githubusercontent.com/Sutanoy/Public-Regression-Datasets/main/age_wt_bfat.txt",  header = TRUE)
#Run the following line to perform a linear regression
lm.fit=lm(Blood_fat ~ Wt + Age, data=df1)
summary(lm.fit)
x = c(2, 4, 6)
y = c(3,5,7)
plot(x, y)
lm.fit=lm(Blood_fat ~ Wt + Age, data=df1)
summary(lm.fit)
urlRemote <- "https://raw.githubusercontent.com/"
pathGithub <- "Sutanoy/Public-Regression-Datasets/main/"
fileName <- "bdiag.csv"
df_brca=read.csv(paste0(urlRemote, pathGithub, fileName) ,sep=",",header = TRUE)
head(df_brca)
#recoding the response variable to 0/1.
df_brca$diagnosis[df_brca$diagnosis=="M"]=1
df_brca$diagnosis[df_brca$diagnosis=="B"]=0
df_brca$diagnosis=as.numeric(df_brca$diagnosis)
fit <- lm(symmetry_mean~symmetry_worst, data = df_brca)
summary(fit)
set.seed(2023)
x=rmultinom(n=7, prob=c(A=0.25,G=0.25,C=0.25,T=0.25), size=100)
colnames(x)<-c("Proteus vulgaris","Bacillus megaterium","Bacillus subtilis","Bacillus stearothermophilus","Escherichia coli","Salmonella typhimurium","Serratia marcescens")
set.seed(2023)
x=rmultinom(n=7, prob=c(A=0.25,G=0.25,C=0.25,T=0.25), size=100)
colnames(x)<-c("Proteus vulgaris","Bacillus megaterium","Bacillus subtilis","Bacillus stearothermophilus","Escherichia coli","Salmonella typhimurium","Serratia marcescens")
statistic_value=(x[3,1] - x[3,4])^2+(x[3,3] - x[3,2])^2
statistic_value
statistic_value=(x[1,3] - x[4,3])^2+(x[3,3] - x[2,3])^2
statistic_value
x
x
x
x
class(x)
x
x[4,3]
x
diabetes
ggplot(data=mtcars, aes(x=mpg,))+ geom_histogram(bins=5)
ggplot(data=mtcars, aes(x=mpg))+ geom_histogram(bins=5)
ggplot(data=mtcars, aes(x=mpg,))+ geom_histogram(bins=5)
ggplot(data = mtcars, aes(x = as.character(mtcars$gear), y  = mpg))+ geom_boxplot()
boxplot(mpg~gear, data = mtcars, main = "MPG Among Three Gears of 32 Automobiles",
ylab = "Miles per Gallon", xlab = "Gear")
data = mtcars
data$gear<-as.factor(data$gear)
test2 = split(data, f=data$gear)
gear3=test2$"3"$mpg
gear4=test2$"4"$mpg
gear5=test2$"5"$mpg
BP= cbind(gear3, gear4, gear5)
boxplot(BP, beside=T)
boxplot(stat_class$EXAM~stat_class$GRADE)
title("EXAM vs GRADE")
boxplot(stat_class$EXAM~stat_class$GRADE)
title("EXAM vs GRADE")
x=seq(0, 4,0.1)
cum.pr1= exp(-4+x)/(1+exp(-4+x))
cum.pr2= exp(-0.5+x)/(1+exp(-0.5+x))
cum.pr3= exp(1+x)/(1+exp(1+x))
plot(x, cum.pr1, type="l", ylab="Cumulative prob", xlab="x",
ylim=c(0, 1), lwd=2)
par(new=T)
plot(x, cum.pr2, type="l", ylab="", xlab="x", ylim=c(0, 1),
col="blue", lwd=2)
par(new=T)
plot(x, cum.pr3, type="l", ylab="", xlab="x", ylim=c(0, 1),
col="red", lwd=2)
x=seq(0, 4,0.1)
cum.pr1= exp(-4+x)/(1+exp(-4+x))
cum.pr2= exp(-0.5+x)/(1+exp(-0.5+x))
cum.pr3= exp(1+x)/(1+exp(1+x))
plot(x, cum.pr1, type="l", ylab="Cumulative prob", xlab="x",
ylim=c(0, 1), lwd=2)
par(new=T)
plot(x, cum.pr2, type="l", ylab="", xlab="x", ylim=c(0, 1),
col="blue", lwd=2)
par(new=T)
plot(x, cum.pr3, type="l", ylab="", xlab="x", ylim=c(0, 1),
col="red", lwd=2)
prob.1=cum.pr1
prob.2=cum.pr2-cum.pr1
prob.3=cum.pr3-cum.pr2
prob.4=1-cum.pr3
plot(x, prob.1, type="l", ylab="prob", xlab="x", ylim=c(0, 1),
lwd=2)
par(new=T)
plot(x, prob.2, type="l", ylab="", xlab="x", ylim=c(0, 1),
col="blue", lwd=2)
par(new=T)
plot(x, prob.3, type="l", ylab="", xlab="x", ylim=c(0, 1),
col="red", lwd=2)
par(new=T)
plot(x, prob.4, type="l", ylab="", xlab="x", ylim=c(0, 1),
col="magenta", lwd=2)
#cumulative prob model example
a=read.csv("C:/Users/kulra/Contacts/Desktop/ideology.csv")
library(MASS)
head(a)
ordered.response <- factor(a$ideol, levels=c("vlib", "lib","mod",
"con", "vcon"), ordered=TRUE)
a=read.csv("C:/Users/kulra/Contacts/Desktop/ideology.csv")
library(MASS)
head(a)
ordered.response <- factor(a$ideol, levels=c("vlib", "lib","mod",
"con", "vcon"), ordered=TRUE)
out=polr(ordered.response~party, weight=count, data=a)
summary(out)
a=read.csv("C:/Users/kulra/Contacts/Desktop/ideology.csv")
library(MASS)
head(a)
ordered.response <- factor(a$ideol, levels=c("vlib", "lib","mod",
"con", "vcon"), ordered=TRUE)
out=polr(ordered.response~party, weight=count, data=a)
summary(out)
#adding more explanatory variables
out3=polr(ordered.response~party+gender, weight=count, data=a)
out4=polr(ordered.response~party+gender+party*gender, weight=count,
data=a)
n=sum(a$count)
extractAIC(out3, k=log(n))
extractAIC(out4, k=log(n))
extractAIC(out, k=log(n))
#refitting model after collapsing some categories
library(car)
brant(out)
library(MASS)
brant(out)
install.packages("brant")
brant(out)
brant::brant(out)
mydata=array(c(30, 8, 45, 95), dim=c(2, 2), dimnames=list(PCR
=c("traces", "No traces"), relapse=c("Yes", "No")))
mydata
mydata2=as.data.frame(as.table(mydata))
mydata2
mydata=array(c(30, 8, 45, 95), dim=c(2, 2), dimnames=list(PCR
=c("traces", "No traces"), relapse=c("Yes", "No")))
mydata
mydata2=as.data.frame(as.table(mydata))
mydata2
out = glm(Freq~PCR+relapse, data=mydata2, family=poisson)
summary(out)
#a
1-pchisq(0.82, 1)
#a
afterlife <- read.table('https://users.stat.ufl.edu/~aa/cat/data/Afterlife.dat', header=TRUE)
afterlife
out = glm(cbind(yes, undecided, no) ~race +gender, data=afterlife, family=poisson)
y = cbind(yes, undecided, no)
y = cbind(afterlife$yes, afterlife$undecided, afterlife$no)
y
out = glm( y ~race +gender, data=afterlife, family=poisson)
levels(afterlife$yes)
afterlife <-  as.dataframe(afterlife)
afterlife <-  as.data.frame(afterlife)
y = cbind(afterlife$yes, afterlife$undecided, afterlife$no)
out = glm( y ~race +gender, data=afterlife, family=poisson)
?casewhen
#a
import(dplyer)
#a
library(dplyer)
#a
library(dyplr)
#a
library(dplyr)
?case_when()
afterlife$response = case_when(
afterlife$yes  ~ "yes",
afterlife$undecided ~ "undecided",
afterlife$no ~ "no",
)
as.table(afterlife)
as.data.frame(as.table(afterlife))
afterlife <- read.table('https://users.stat.ufl.edu/~aa/cat/data/Afterlife.dat', header=TRUE)
as.data.frame(as.table(afterlife))
#(b)
exp(1.4165)
#(c) estimated odds ratio of interaction term of genderfemales:beliefyes
exp(0.1368)
#(d)
postlife <- read.table('https://users.stat.ufl.edu/~aa/cat/data/Postlife.dat', header=TRUE)
postlife
class(postlife)
post <- read.table('https://users.stat.ufl.edu/~aa/cat/data/Postlife.dat', header=TRUE)
post
post <- read.table('https://users.stat.ufl.edu/~aa/cat/data/Postlife.dat', header=TRUE)
post
out = glm( count ~race +postlife, data=post, family=poisson)
summary(out)
exp(1.49846)
1-pchisq(4.0412*10(-14), df = 0)
1-pchisq(4.0412*10^(-14), df = 0)
1-pchisq(0, df = 0)
1-pchisq(4.0412*10^(-15), df = 0)
1-pchisq(4.0412*10^(-16), df = 0)
1-pchisq(10^(-16), df = 0)
1-pchisq(4.0412*10^(-14), df = 1)
library(shiny); runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp/rshinyapp.R')
#setwd("C:/Users/holly/OneDrive/Documents/R/656")
setwd("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction")
runApp('RShinyapp/rshinyapp.R')
#setwd("C:/Users/holly/OneDrive/Documents/R/656")
setwd("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp")
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
library(htmlwidgets)
library(RColorBrewer)
library(raster)
## Make vector of colors for values smaller than 0 (20 colors)
rc1 <- colorRampPalette(colors = c("red", "white"), space = "Lab")(20)
rc1
## Make vector of colors for values larger than 0 (180 colors)
rc2 <- colorRampPalette(colors = c("white", "green"), space = "Lab")(180)
## Combine the two color palettes
rampcols <- c(rc1, rc2)
rampcols
mypal <- colorNumeric(palette = rampcols, domain = shiny_data$DeathCount)
mypal
## If you want to preview the color range, run the following code
previewColors(colorNumeric(palette = rampcols, domain = NULL), values = -20:180)
min(shiny_data$DeathCount)
max(shiny_data$DeathCount)
## If you want to preview the color range, run the following code
previewColors(colorNumeric(palette = rampcols, domain = NULL), values = 50:1100)
## Make vector of colors for values larger than 0 (180 colors)
rc2 <- colorRampPalette(colors = c("white", "dark red"), space = "Lab")(180)
## Make vector of colors for values smaller than 0 (20 colors)
rc1 <- colorRampPalette(colors = c("light red", "white"), space = "Lab")(20)
## Make vector of colors for values smaller than 0 (20 colors)
rc1 <- colorRampPalette(colors = c("red", "white"), space = "Lab")(20)
## Make vector of colors for values larger than 0 (180 colors)
rc2 <- colorRampPalette(colors = c("white", "dark red"), space = "Lab")(180)
## Combine the two color palettes
rampcols <- c(rc1, rc2)
mypal <- colorNumeric(palette = rampcols, domain = shiny_data$DeathCount)
## If you want to preview the color range, run the following code
previewColors(colorNumeric(palette = rampcols, domain = NULL), values = 50:1100)
## Make vector of colors for values smaller than 0 (20 colors)
rc1 <- colorRampPalette(colors = c("indianred1", "red3"), space = "Lab")(20)
## Make vector of colors for values larger than 0 (180 colors)
rc2 <- colorRampPalette(colors = c("red3", "dark red"), space = "Lab")(180)
## Combine the two color palettes
rampcols <- c(rc1, rc2)
mypal <- colorNumeric(palette = rampcols, domain = shiny_data$DeathCount)
## If you want to preview the color range, run the following code
previewColors(colorNumeric(palette = rampcols, domain = NULL), values = 50:1100)
## Make vector of colors for values smaller than 0 (20 colors)
rc1 <- colorRampPalette(colors = c("indianred1", "red3"), space = "Lab")(30)
## Make vector of colors for values larger than 0 (180 colors)
rc2 <- colorRampPalette(colors = c("red3", "dark red"), space = "Lab")(170)
## Combine the two color palettes
rampcols <- c(rc1, rc2)
mypal <- colorNumeric(palette = rampcols, domain = shiny_data$DeathCount)
## If you want to preview the color range, run the following code
previewColors(colorNumeric(palette = rampcols, domain = NULL), values = 50:1100)
runApp('rshinyapp.R')
install.packages("raster")
install.packages("raster")
runApp('rshinyapp.R')
install.packages("Rcpp")
install.packages("Rcpp")
runApp('rshinyapp.R')
