#rename the columns from yi to their names like in table 6.5
names(a)[3] = "fish"
names(a)[4] = "invertebrate"
names(a)[5] = "reptile"
names(a)[6] = "bird"
names(a)[7] = "other"
names(a)
a
fit <- vglm(cbind(fish, invertebrate, reptile, bird, other) ~ factor(lake) + factor(size),
family=multinomial(ref = "fish"), data=a)
coef(fit, matrix = TRUE)
summary(fit)
library(VGAM) # package for multivariate GLMs, such as multinomial models
a <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Alligators2.dat", header = T)
a
a$lake = relevel(factor(a$lake, levels = c("1","2", "3", "4")), ref = "4")
#rename the columns from yi to their names like in table 6.5
names(a)[3] = "fish"
names(a)[4] = "invertebrate"
names(a)[5] = "reptile"
names(a)[6] = "bird"
names(a)[7] = "other"
names(a)
a
fit <- vglm(cbind(fish, invertebrate, reptile, bird, other) ~ factor(lake) + factor(size),
family=multinomial(ref = "fish"), data=a)
coef(fit, matrix = TRUE)
summary(fit)
data=c(172,111, 57, 78, 82, 283)
titles = list(Party = c("Republican", "Democrat"),
Opinion= c("Agree", "Neutral", "Disagree"))
size=c(2, 3)
Table_6.9 = array(data, size, titles)
Table_6.9 = as.data.frame(Table_6.9)
Table_6.9$Party = c("Republican", "Democrat")
Table_6.9
fit3 <- vglm(cbind(Agree, Neutral, Disagree) ~ Party ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3, matrix = TRUE)
summary(fit3)
AIC(fit3)
data=c(172,111, 57, 78, 82, 283)
titles = list(Party = c("Republican", "Democrat"),
Opinion= c("Agree", "Neutral", "Disagree"))
size=c(2, 3)
Table_6.9 = array(data, size, titles)
Table_6.9 = as.data.frame(Table_6.9)
Table_6.9$Party = c("Republican", "Democrat")
Table_6.9
fit3 <- vglm(cbind(Agree, Neutral, Disagree) ~ Party ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3, matrix = TRUE)
summary(fit3)
AIC(fit3)
class(a)
party <- c("Republican", "Democrat")
agree <- c(172, 111)
neutral <- c(57, 78)
disagree <- c(82, 283)
library(VGAM)
fit4 <- vglm(cbind(agree,neutral, disagree) ~ party,
family=multinomial(refLevel="disagree"))
coef(fit4, matrix = TRUE)
summary(fit4)
library(VGAM) # package for multivariate GLMs, such as multinomial models
a <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Alligators2.dat", header = T)
a
a$lake = relevel(factor(a$lake, levels = c("1","2", "3", "4")), ref = "4")
#rename the columns from yi to their names like in table 6.5
names(a)[3] = "fish"
names(a)[4] = "invertebrate"
names(a)[5] = "reptile"
names(a)[6] = "bird"
names(a)[7] = "other"
names(a)
#class(a)
fit <- vglm(cbind(fish, invertebrate, reptile, bird, other) ~ factor(lake) + factor(size),
family=multinomial(ref = "fish"), data=a)
coef(fit, matrix = TRUE)
summary(fit)
#fit with only intercept
fit3.5 <- vglm(cbind(Agree, Neutral, Disagree) ~ 1 ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3.5, matrix = TRUE)
summary(fit3.5)
AIC(fit3.5)
anova(fit3, fit3.5, test = "Chisq")
fit3 <- vglm(cbind(Agree, Neutral, Disagree) ~ Party ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3, matrix = TRUE)
summary(fit3)
fit3.5 <- vglm(cbind(Agree, Neutral, Disagree) ~ 1 ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3.5, matrix = TRUE)
summary(fit3.5)
AIC(fit3.5)
anova(fit3, fit3.5, test = "Chisq")
VGAM:: lrtest(fit3, fit3.5)
summary(fit3.5)
gators <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Alligators2.dat",
header=TRUE)
long.gators <- gators %>%
pivot_longer(cols =          starts_with("y"), values_to = "food")
head(long.gators)
#alternative coding
library(tidyver)
#alternative coding
library(tidyverse)
gators <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Alligators2.dat",
header=TRUE)
long.gators <- gators %>%
pivot_longer(cols =          starts_with("y"), values_to = "food")
head(long.gators)
a
boxplot(EXAM~GRADE,data=stat_class)
title('Exam scores vs Letter Grades')
shiny::runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
runApp()
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
env <- data.frame(rep(1,6))
env$party <- c(rep("Rep", times=3),rep("Dem", times=3))
env$choice <- c(rep(c("agree", "neutral", "disagree"), times=2))
env$count <- c(172, 57, 82, 111, 78, 283)
env$party <- as.factor(env$party)
env$choice <- as.factor(env$choice)
env$choice <- relevel(env$choice, ref="neutral")
env <- env[,-1]
library(nnet)
out=multinom(choice~party, data=env, weight=count)
summary(out)
out0=multinom(choice~1, data=env, weight=count)
summary(out0)
env
party <- c("Republican", "Democrat")
agree <- c(172, 111)
neutral <- c(57, 78)
disagree <- c(82, 283)
library(VGAM)
fit4 <- vglm(cbind(agree,neutral, disagree) ~ party,
family=multinomial(refLevel="disagree"))
coef(fit4, matrix = TRUE)
summary(fit4)
data=c(172,111, 57, 78, 82, 283)
titles = list(Party = c("Republican", "Democrat"),
Opinion= c("Agree", "Neutral", "Disagree"))
size=c(2, 3)
Table_6.9 = array(data, size, titles)
Table_6.9 = as.data.frame(Table_6.9)
Table_6.9$Party = c("Republican", "Democrat")
Table_6.9
data=c(172,111, 57, 78, 82, 283)
titles = list(Party = c("Republican", "Democrat"),
Opinion= c("Agree", "Neutral", "Disagree"))
size=c(2, 3)
Table_6.9 = array(data, size, titles)
Table_6.9 = as.data.frame(Table_6.9)
Table_6.9$Party = c("Republican", "Democrat")
Table_6.9
fit3 <- vglm(cbind(Agree, Neutral, Disagree) ~ Party ,
family=multinomial(ref = "Neutral"), data=Table_6.9)
coef(fit3, matrix = TRUE)
summary(fit3)
AIC(fit3)
#Hosemer-Lemeshow Test
library(MASS)
library(generalhoslem)
env <- data.frame(rep(1,6))
env$party <- c(rep("Rep", times=3),rep("Dem", times=3))
env$choice <- c(rep(c("agree", "neutral", "disagree"), times=2))
env$count <- c(172, 57, 82, 111, 78, 283)
env$party <- as.factor(env$party)
env$choice <- as.factor(env$choice)
env$choice <- relevel(env$choice, ref="neutral")
env <- env[,-1]
library(nnet)
out=multinom(choice~party, data=env, weight=count)
summary(out)
out0=multinom(choice~1, data=env, weight=count)
summary(out0)
TS=1607.794-1507.506
TS
1-pchisq(TS,2)
library(lmtest)
lrtest(out,out0)
#Hosemer-Lemeshow Test
library(MASS)
library(generalhoslem)
logitgof(env$choice, fitted(out))
env <- data.frame(rep(1,6))
env$party <- c(rep("Rep", times=3),rep("Dem", times=3))
env$choice <- c(rep(c("agree", "neutral", "disagree"), times=2))
env$count <- c(172, 57, 82, 111, 78, 283)
env$party <- as.factor(env$party)
env$choice <- as.factor(env$choice)
env$choice <- relevel(env$choice, ref="neutral")
env <- env[,-1]
library(nnet)
out=multinom(choice~party, data=env, weight=count)
summary(out)
out0=multinom(choice~1, data=env, weight=count)
summary(out0)
TS=1607.794-1507.506
TS
1-pchisq(TS,2)
library(lmtest)
lrtest(out,out0)
#Hosemer-Lemeshow Test
library(MASS)
library(generalhoslem)
logitgof(env$choice, fitted(out), g = 5)
logitgof(env$choice, fitted(out), g = 3)
logitgof(env$choice, fitted(out))
logitgof(Table_6.9$cbind(Agree, Neutral, Disagree), fitted(fit3))
logitgof(cbind(Agree, Neutral, Disagree), fitted(fit3))
logitgof(cbind(Table_6.9$Agree, Table_6.9$Neutral, Table_6.9$Disagree), fitted(fit3))
y = cbind(Table_6.9$Agree, Table_6.9$Neutral, Table_6.9$Disagree)
y
out2 <- vglm(choice ~party, data = env, trace = TRUE,
family=multinomial(ref="agree"), weights=count)
library(MASS)
library(generalhoslem)
logitgof(env$choice, fitted(out), g = 2)
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
# # Reading in the dataset
# shiny_data <- read.csv("imp_gender_race_tx.csv", header = T)
shiny_data <- read.csv("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/imp_gender_race_tx.csv", header = T)
runApp()
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
shiny_data
extract_coordinates <- function(coord_string) {
coord_string <- gsub("[\\(\\)]", "", coord_string)  # Remove parentheses
coords <- unlist(strsplit(coord_string, ", "))  # Split into latitude and longitude
return(as.numeric(coords))
}
# Apply function to extract coordinates
shiny_data$Coordinates <- sapply(shiny_data$LatLong, extract_coordinates)
shiny_data$LatLong
gsub("[\\(\\)]", "", shiny_data$LatLong)
coords <- unlist(strsplit(gsub("[\\(\\)]", "", shiny_data$LatLong), ", "))
coords
as.numeric(coords)
# Apply function to extract coordinates
shiny_data$Coordinates <- sapply(shiny_data$LatLong, extract_coordinates)
extract_coordinates(coords)
?sapply
apply(shiny_data$LatLong, extract_coordinates)
apply(shiny_data$LatLong, FUN = extract_coordinates)
dim(shiny_data$LatLong)
extract_coordinates(shiny_data$LatLong)
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
nrow(extract_coordinates(shiny_data$LatLong))
nrow( shiny_data$Coordinates)
shiny_data$Coordinates
# Apply function to extract coordinates
shiny_data$Coordinates <-  extract_coordinates(shiny_data$LatLong)
extract_coordinates(shiny_data$LatLong)
extract_coordinates <- function(coord_string) {
coord_string <- gsub("[\\(\\)]", "", coord_string)  # Remove parentheses
#coords <- unlist(strsplit(coord_string, ", "))  # Split into latitude and longitude
return(as.numeric(coords))
}
# Apply function to extract coordinates
shiny_data$Coordinates <-  extract_coordinates(shiny_data$LatLong)
extract_coordinates(shiny_data$LatLong)
extract_coordinates <- function(coord_string) {
coord_string <- gsub("[\\(\\)]", "", coord_string)  # Remove parentheses
#coords <- unlist(strsplit(coord_string, ", "))  # Split into latitude and longitude
return(as.numeric(coord_string))
}
extract_coordinates(shiny_data$LatLong)
coord_string <- gsub("[\\(\\)]", "", shiny_data$LatLong)
coord_string
shiny_data <- read.csv("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/imp_gender_race_tx.csv", header = T)
# Function to extract latitude and longitude
extract_coordinates <- function(coord_string) {
coord_string <- gsub("[\\(\\)]", "", coord_string)  # Remove parentheses
coords <- unlist(strsplit(coord_string, ", "))  # Split into latitude and longitude
return(as.numeric(coords))
}
# Apply function to extract coordinates
Coordinates <-  sapply(shiny_data$LatLong, extract_coordinates)
Coordinates[seq(1, length(Coordinates), 2)]
Coordinates
Coordinates
shiny_data$coords = Coordinates
Coordinates
evens <- function(x) subset(x, x %% 2 == 0)
evens(Coordinates)
Coordinates[c(FALSE, TRUE)]
Coordinates
Coordinates <-  sapply(shiny_data$LatLong, extract_coordinates)
#odd values- latitudes
latitudes <- Coordinates[seq(1, length(Coordinates), 2)]
#even values - longitudes
longitudes <- Coordinates[c(FALSE, TRUE)]
shiny_data$latitude = latitudes
shiny_data$longitude = longitudes
shiny_data
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
output$county_map <- renderLeaflet({
filtered_data <- shiny_data
# Apply filters based on user input
if (input$genderInput != "All") {
filtered_data <- filtered_data[filtered_data$Gender == input$genderInput, ]
}
if (input$raceInput != "All") {
filtered_data <- filtered_data[filtered_data$Race_Ethnicity == input$raceInput, ]
}
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
head(filtered_data)
filtered_data <- filtered_data[filtered_data$Gender == input$genderInput, ]
head(filtered_data)
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(mtcars, aes(group = gear, y = mpg)) +
geom_boxplot()
ggplot(mtcars, aes(x = gear, y = mpg)) +
geom_boxplot()
ggplot(mtcars, aes(x = factor(gear), y = mpg)) +
geom_boxplot()
df1 <- read.table("https://raw.githubusercontent.com/Sutanoy/Public-Regression-Datasets/main/age_wt_bfat.txt",  header = TRUE)
#Run the following line to perform a linear regression
lm.fit=lm(Blood_fat ~ Wt + Age, data=df1)
summary(lm.fit)
x = c(2, 4, 6)
y = c(3,5,7)
plot(x, y)
lm.fit=lm(Blood_fat ~ Wt + Age, data=df1)
summary(lm.fit)
urlRemote <- "https://raw.githubusercontent.com/"
pathGithub <- "Sutanoy/Public-Regression-Datasets/main/"
fileName <- "bdiag.csv"
df_brca=read.csv(paste0(urlRemote, pathGithub, fileName) ,sep=",",header = TRUE)
head(df_brca)
#recoding the response variable to 0/1.
df_brca$diagnosis[df_brca$diagnosis=="M"]=1
df_brca$diagnosis[df_brca$diagnosis=="B"]=0
df_brca$diagnosis=as.numeric(df_brca$diagnosis)
fit <- lm(symmetry_mean~symmetry_worst, data = df_brca)
summary(fit)
set.seed(2023)
x=rmultinom(n=7, prob=c(A=0.25,G=0.25,C=0.25,T=0.25), size=100)
colnames(x)<-c("Proteus vulgaris","Bacillus megaterium","Bacillus subtilis","Bacillus stearothermophilus","Escherichia coli","Salmonella typhimurium","Serratia marcescens")
set.seed(2023)
x=rmultinom(n=7, prob=c(A=0.25,G=0.25,C=0.25,T=0.25), size=100)
colnames(x)<-c("Proteus vulgaris","Bacillus megaterium","Bacillus subtilis","Bacillus stearothermophilus","Escherichia coli","Salmonella typhimurium","Serratia marcescens")
statistic_value=(x[3,1] - x[3,4])^2+(x[3,3] - x[3,2])^2
statistic_value
statistic_value=(x[1,3] - x[4,3])^2+(x[3,3] - x[2,3])^2
statistic_value
x
x
x
x
class(x)
x
x[4,3]
x
diabetes
ggplot(data=mtcars, aes(x=mpg,))+ geom_histogram(bins=5)
ggplot(data=mtcars, aes(x=mpg))+ geom_histogram(bins=5)
ggplot(data=mtcars, aes(x=mpg,))+ geom_histogram(bins=5)
ggplot(data = mtcars, aes(x = as.character(mtcars$gear), y  = mpg))+ geom_boxplot()
boxplot(mpg~gear, data = mtcars, main = "MPG Among Three Gears of 32 Automobiles",
ylab = "Miles per Gallon", xlab = "Gear")
data = mtcars
data$gear<-as.factor(data$gear)
test2 = split(data, f=data$gear)
gear3=test2$"3"$mpg
gear4=test2$"4"$mpg
gear5=test2$"5"$mpg
BP= cbind(gear3, gear4, gear5)
boxplot(BP, beside=T)
boxplot(stat_class$EXAM~stat_class$GRADE)
title("EXAM vs GRADE")
boxplot(stat_class$EXAM~stat_class$GRADE)
title("EXAM vs GRADE")
shiny::runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp')
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp/rshinyapp.R')
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(shiny); runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp/rshinyapp.R')
load(Rcpp)
library(Rcpp)
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp/rshinyapp.R')
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(RcppTOML)
detach("package:RcppTOML", unload = TRUE)
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp")
library(shiny); runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp/rshinyapp.R')
## Make vector of colors for values smaller than 0 (20 colors)
rc1 <- colorRampPalette(colors = c("white", "indian red"), space = "Lab")(30)
## Make vector of colors for values which are much larger than 50 (50 colors)
rc2 <- colorRampPalette(colors = c("white", "darkred"), space = "Lab")(100)
## If you want to preview the color range, run the following code
#min deathcounts is 50.5, max deathcounts is 1053
previewColors(colorNumeric(palette = rc2, domain = NULL), values = 50:1100)
county_map()$DeathCount
runApp('C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp/rshinyapp.R')
shiny_data
shiny_data
shiny_data <- read.csv("imp_gender_race_tx.csv")
setwd("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp")
library(shiny)
library(leaflet)
library(geojsonio)
library(sf)
library(dplyr)
library(htmlwidgets)
library(raster)
library(RColorBrewer)
## load data
shiny_data <- read.csv("imp_gender_race_tx.csv")
shiny_data
runApp('rshinyapp.R')
shiny_data[shiny_data$Gender == "Female", ]
shiny_data[shiny_data$Gender == "Female" && shiny_data$Race_Ethnicity == "White", ]
shiny_data[shiny_data$Gender == "Female" & shiny_data$Race_Ethnicity == "White", ]
shiny_data[shiny_data$Gender == "Female" & shiny_data$Race_Ethnicity == "White", ]$DeathCount
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
shiny_data[shiny_data$Gender == "Female" & shiny_data$Race_Ethnicity == "White", ]$DeathCount
length(shiny_data[shiny_data$Gender == "Female" & shiny_data$Race_Ethnicity == "White", ]$DeathCount)
min(shiny_data[shiny_data$Gender == "Female" & shiny_data$Race_Ethnicity == "White", ]$DeathCount)
max(shiny_data[shiny_data$Gender == "Female" & shiny_data$Race_Ethnicity == "White", ]$DeathCount)
val1 = 150
val2 = 100
counts = shiny_data$DeathCount
### Create an asymmetric color range
setColorRange <- function(val1, val2, counts)  {
## Make vector of colors for values which are smaller (250 colors)
rc1 <- colorRampPalette(colors = c("white", "red"), space = "Lab")(val1)
## Make vector of colors for values which are much larger than 50 (50 colors)
rc2 <- colorRampPalette(colors = c("red", "dark red"), space = "Lab")(val2)
## Combine the two color palettes
rampcols <- c(rc1, rc2)
mypal <- colorNumeric(palette = rampcols, domain = counts)
}
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
val1 = 150
val2 = 100
counts = shiny_data$DeathCount
rampcols = "#FFFFF"
mypal <- colorNumeric(palette = rampcols, domain = counts)
setColorRange(round(min(counts)), round(max(counts)), counts)
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
setColorRange(shiny_data$DeathCount)
setColorRange <- function(counts)  {
## Make vector of colors for values which are smaller (150 colors)
rc1 <- colorRampPalette(colors = c("white", "red"), space = "Lab")(150)
## Make vector of colors for values which are much larger than 50 (100 colors)
rc2 <- colorRampPalette(colors = c("red", "dark red"), space = "Lab")(100)
## Combine the two color palettes
rampcols <- c(rc1, rc2)
mypal <- colorNumeric(palette = rampcols, domain = counts)
return(mypal)
}
setColorRange(shiny_data$DeathCount)
setColorRange <- function(counts)  {
## Make vector of colors for values which are smaller (150 colors)
rc1 <- colorRampPalette(colors = c("white", "red"), space = "Lab")(150)
## Make vector of colors for values which are much larger than 50 (100 colors)
rc2 <- colorRampPalette(colors = c("red", "dark red"), space = "Lab")(100)
## Combine the two color palettes
rampcols <- c(rc1, rc2)
mypal <- colorNumeric(palette = rampcols, domain = counts)
print(mypal)
return(mypal)
}
setColorRange(shiny_data$DeathCount)
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp('rshinyapp.R')
runApp()
runApp()
runApp()
#setwd("C:/Users/holly/OneDrive/Documents/R/656")
setwd("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp")
shiny_data <- read.csv("imp_gender_race_tx.csv")
runApp('rshinyapp.R')
runApp()
#setwd("C:/Users/holly/OneDrive/Documents/R/656")
setwd("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp")
shiny_data <- read.csv("imp_gender_race_tx.csv")
runApp()
#setwd("C:/Users/holly/OneDrive/Documents/R/656")
setwd("C:/Users/kulra/Contacts/Desktop/heartmortality-prediction/RShinyapp")
shiny_data <- read.csv("imp_gender_race_tx.csv")
runApp('rshinyapp.R')
runApp()
runApp('rshinyapp.R')
runApp('rshinyapp.R')
